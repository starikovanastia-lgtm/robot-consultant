import React, { useState, useRef, useEffect } from 'react';
import { cakes, occasions, preferences } from '../data/cakes';
import './ChatInterface.css';

const ChatInterface = ({ onRecommendations }) => {
  const [messages, setMessages] = useState([]);
  const [currentStep, setCurrentStep] = useState(0);
  const [userAnswers, setUserAnswers] = useState({});
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    // –ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    setTimeout(() => {
      addBotMessage("–ü—Ä–∏–≤–µ—Ç! üëã –Ø —Ä–æ–±–æ—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –§–∞–±—Ä–∏–∫–∏ —Ç–æ—Ä—Ç–æ–≤. –ü–æ–º–æ–≥—É –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π —Ç–æ—Ä—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞!");
    }, 500);

    setTimeout(() => {
      addBotMessage("–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º! –î–ª—è –∫–∞–∫–æ–≥–æ —Å–ª—É—á–∞—è –≤–∞–º –Ω—É–∂–µ–Ω —Ç–æ—Ä—Ç?");
      showQuickReplies(occasions);
    }, 1500);
  }, []);

  const addBotMessage = (text) => {
    setMessages(prev => [...prev, { type: 'bot', text, timestamp: new Date() }]);
  };

  const addUserMessage = (text) => {
    setMessages(prev => [...prev, { type: 'user', text, timestamp: new Date() }]);
  };

  const showQuickReplies = (options) => {
    setMessages(prev => [...prev, { type: 'quick-replies', options }]);
  };

  const handleQuickReply = (answer) => {
    addUserMessage(answer);
    setUserAnswers(prev => ({ ...prev, occasion: answer }));
    
    // –£–¥–∞–ª—è–µ–º quick replies
    setMessages(prev => prev.filter(msg => msg.type !== 'quick-replies'));
    
    setTimeout(() => {
      nextQuestion();
    }, 1000);
  };

  const nextQuestion = () => {
    const questions = [
      {
        question: "–ö–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–∞–¥–æ—Å—Ç–∏ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?",
        options: preferences.find(p => p.id === 'sweetness').options,
        key: 'sweetness'
      },
      {
        question: "–ö–∞–∫–æ–π —Ä–∞–∑–º–µ—Ä —Ç–æ—Ä—Ç–∞ –≤–∞–º –Ω—É–∂–µ–Ω?",
        options: preferences.find(p => p.id === 'size').options,
        key: 'size'
      },
      {
        question: "–ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç?",
        options: preferences.find(p => p.id === 'budget').options,
        key: 'budget'
      },
      {
        question: "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∞–ª–ª–µ—Ä–≥–∏–∏ –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤ –ø–∏—Ç–∞–Ω–∏–∏?",
        options: preferences.find(p => p.id === 'allergies').options,
        key: 'allergies'
      }
    ];

    if (currentStep < questions.length) {
      const question = questions[currentStep];
      addBotMessage(question.question);
      showQuickReplies(question.options);
      setCurrentStep(prev => prev + 1);
    } else {
      // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–ø—Ä–æ—Å –∏ –¥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      setTimeout(() => {
        addBotMessage("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –ø–æ–¥–±–µ—Ä—É –¥–ª—è –≤–∞—Å –∏–¥–µ–∞–ª—å–Ω—ã–µ —Ç–æ—Ä—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π...");
        setTimeout(() => {
          generateRecommendations();
        }, 2000);
      }, 1000);
    }
  };

  const generateRecommendations = () => {
    setIsTyping(true);
    
    setTimeout(() => {
      const recommendations = filterCakesByPreferences();
      addBotMessage(`–Ø –Ω–∞—à–µ–ª ${recommendations.length} –∏–¥–µ–∞–ª—å–Ω—ã—Ö —Ç–æ—Ä—Ç–æ–≤ –¥–ª—è –≤–∞—Å! üéâ`);
      
      setTimeout(() => {
        addBotMessage("–í–æ—Ç –º–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:");
        setMessages(prev => [...prev, { type: 'recommendations', cakes: recommendations }]);
        setIsTyping(false);
        
        setTimeout(() => {
          addBotMessage("–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —Ç–æ—Ä—Ç–µ?");
          showQuickReplies([
            { text: "–î–∞, –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥", action: "show-catalog" },
            { text: "–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ", action: "more-info" }
          ]);
        }, 2000);
      }, 1000);
    }, 2000);
  };

  const filterCakesByPreferences = () => {
    let filtered = [...cakes];

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–ª—É—á–∞—é
    if (userAnswers.occasion) {
      filtered = filtered.filter(cake => 
        cake.suitableFor.some(occasion => 
          userAnswers.occasion.includes(occasion) || 
          (userAnswers.occasion.includes('–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è') && occasion.includes('–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è'))
        )
      );
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–ª–∞–¥–æ—Å—Ç–∏
    if (userAnswers.sweetness) {
      const sweetnessMap = {
        '–ù–µ –æ—á–µ–Ω—å —Å–ª–∞–¥–∫–∏–π': 2,
        '–£–º–µ—Ä–µ–Ω–Ω–æ —Å–ª–∞–¥–∫–∏–π': 3,
        '–û—á–µ–Ω—å —Å–ª–∞–¥–∫–∏–π': 5
      };
      const targetSweetness = sweetnessMap[userAnswers.sweetness];
      filtered = filtered.filter(cake => Math.abs(cake.sweetness - targetSweetness) <= 1);
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É
    if (userAnswers.size) {
      const sizeMap = {
        '–ú–∞–ª–µ–Ω—å–∫–∏–π (–¥–æ 1 –∫–≥)': weight => parseFloat(weight) <= 1.0,
        '–°—Ä–µ–¥–Ω–∏–π (1-1.5 –∫–≥)': weight => parseFloat(weight) >= 1.0 && parseFloat(weight) <= 1.5,
        '–ë–æ–ª—å—à–æ–π (–æ—Ç 1.5 –∫–≥)': weight => parseFloat(weight) >= 1.5
      };
      const sizeFilter = sizeMap[userAnswers.size];
      if (sizeFilter) {
        filtered = filtered.filter(cake => sizeFilter(parseFloat(cake.weight)));
      }
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –±—é–¥–∂–µ—Ç—É
    if (userAnswers.budget) {
      const budgetMap = {
        '–î–æ 2000 ‚ÇΩ': price => parseInt(price) <= 2000,
        '2000-3000 ‚ÇΩ': price => parseInt(price) >= 2000 && parseInt(price) <= 3000,
        '–û—Ç 3000 ‚ÇΩ': price => parseInt(price) >= 3000
      };
      const budgetFilter = budgetMap[userAnswers.budget];
      if (budgetFilter) {
        filtered = filtered.filter(cake => {
          const price = parseInt(cake.price.match(/\d+/)[0]);
          return budgetFilter(price);
        });
      }
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∞–ª–ª–µ—Ä–≥–∏—è–º
    if (userAnswers.allergies && userAnswers.allergies !== '–ù–µ—Ç') {
      filtered = filtered.filter(cake => 
        !cake.allergens.some(allergen => 
          userAnswers.allergies.includes(allergen)
        )
      );
    }

    // –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã —Å–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-3 –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
    if (filtered.length === 0) {
      filtered = cakes.sort((a, b) => b.popularity - a.popularity).slice(0, 3);
    }

    return filtered.slice(0, 5); // –ú–∞–∫—Å–∏–º—É–º 5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  };

  const handleAction = (action) => {
    if (action === 'show-catalog') {
      const recommendations = filterCakesByPreferences();
      onRecommendations(recommendations, userAnswers);
    } else if (action === 'more-info') {
      addBotMessage("–ö–æ–Ω–µ—á–Ω–æ! –Ø —Ä–∞—Å—Å–∫–∞–∂—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞–∂–¥–æ–º —Ç–æ—Ä—Ç–µ. –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –∫–∞—Ç–∞–ª–æ–≥, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–∞–≤–µ, –∞–ª–ª–µ—Ä–≥–µ–Ω–∞—Ö –∏ —Ü–µ–Ω–∞—Ö.");
    }
  };

  return (
    <div className="chat-interface">
      <div className="chat-header">
        <div className="bot-avatar">ü§ñ</div>
        <div className="bot-info">
          <h3>–†–æ–±–æ—Ç-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –§–∞–±—Ä–∏–∫–∏ —Ç–æ—Ä—Ç–æ–≤</h3>
          <p>–û–Ω–ª–∞–π–Ω</p>
        </div>
      </div>

      <div className="chat-messages">
        {messages.map((message, index) => (
          <div key={index} className={`message ${message.type}`}>
            {message.type === 'bot' && (
              <div className="message-content">
                <div className="message-avatar">ü§ñ</div>
                <div className="message-bubble">
                  <p>{message.text}</p>
                  <span className="message-time">
                    {message.timestamp.toLocaleTimeString('ru-RU', { 
                      hour: '2-digit', 
                      minute: '2-digit' 
                    })}
                  </span>
                </div>
              </div>
            )}

            {message.type === 'user' && (
              <div className="message-content user">
                <div className="message-bubble">
                  <p>{message.text}</p>
                  <span className="message-time">
                    {message.timestamp.toLocaleTimeString('ru-RU', { 
                      hour: '2-digit', 
                      minute: '2-digit' 
                    })}
                  </span>
                </div>
                <div className="message-avatar">üë§</div>
              </div>
            )}

            {message.type === 'quick-replies' && (
              <div className="quick-replies">
                {message.options.map((option, optIndex) => (
                  <button
                    key={optIndex}
                    className="quick-reply-btn"
                    onClick={() => {
                      if (option.action) {
                        handleAction(option.action);
                      } else {
                        handleQuickReply(option.text || option);
                      }
                    }}
                  >
                    {option.text || option}
                  </button>
                ))}
              </div>
            )}

            {message.type === 'recommendations' && (
              <div className="recommendations-preview">
                {message.cakes.map((cake, cakeIndex) => (
                  <div key={cakeIndex} className="cake-preview">
                    <div className="cake-preview-image">
                      {cake.image ? 'üç∞' : 'üéÇ'}
                    </div>
                    <div className="cake-preview-info">
                      <h4>{cake.name}</h4>
                      <p>{cake.description}</p>
                      <span className="cake-price">{cake.price}</span>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        ))}

        {isTyping && (
          <div className="message bot">
            <div className="message-content">
              <div className="message-avatar">ü§ñ</div>
              <div className="message-bubble typing">
                <div className="typing-indicator">
                  <span></span>
                  <span></span>
                  <span></span>
                </div>
              </div>
            </div>
          </div>
        )}

        <div ref={messagesEndRef} />
      </div>
    </div>
  );
};

export default ChatInterface;
